#File explorer
#Essential system file.

import essentials
import os
import floppy
import audio
from external import Settings as s

settings = s()

show_extensions = False

def get_programs():
    items = []
    def scan_directory(current_path=""):
        dir_items = []
        full_path = "disk/" + current_path
        # Get all directories first
        for item in os.listdir(full_path):
            item_path = full_path + "/" + item
            relative_path = current_path + "/" + item if current_path else item
            if os.path.isdir(item_path):
                subitems = scan_directory(relative_path)
                if subitems:
                    dir_items.append(["dir", item, relative_path, subitems])
        # Then get all supported files
        for item in os.listdir(full_path):
            item_path = full_path + "/" + item
            relative_path = current_path + "/" + item if current_path else item
            if os.path.isfile(item_path):
                if item.endswith(".aap"):
                    dir_items.append(["file", item, relative_path, None, "aap"])
                elif item.endswith(".aai"):
                    dir_items.append(["file", item, relative_path, None, "aai"])
                elif item.endswith(".aat"):
                    dir_items.append(["file", item, relative_path, None, "aat"])
        return sorted(dir_items)
    return scan_directory()

def draw_list(items, selected, path=""):
    item_limit = 9
    screen.clear(9)
    # Draw Back button if not at root
    if len(nav_stack) > 1:
        screen.draw_rect(0, 0, 60, 20, 18)  # Button background
        screen.draw_string(4, 6, "< Back", -1, 23)
        title_y = 24
        path_y = 40
        list_start_y = 56
    else:
        title_y = 0
        path_y = 24
        list_start_y = 40
    screen.draw_string(0, title_y, "File Explorer", -1, 18)
    screen.draw_string(0, title_y + 8, f"Hoax OS {settings.version}", -1, 18)
    if path:
        screen.draw_string(0, path_y, ("disk/" + path)[:32], 18, 9)
    else:
        screen.draw_string(0, path_y, "disk/", 18, 9)
    screen.draw_string(0, path_y + 8, "{bar_h}"*32, -1, 18)
    y = list_start_y
    total_size = 0
    for i in range(min(len(items), item_limit)):
        cursor = ">" if i == selected else " "
        if items[i][0] == "dir":
            prefix = "{folder} "
        elif len(items[i]) > 4 and items[i][4] == "aap":
            prefix = "{save} "
        elif len(items[i]) > 4 and items[i][4] == "aai":
            prefix = "{image} "
        elif len(items[i]) > 4 and items[i][4] == "aat":
            prefix = "{document} "
        else:
            prefix = "X"
        # Add new field to display file size
        total_size += os.path.getsize(os.path.join("disk", path, items[i][1]))
        if show_extensions:
            screen.draw_string(0, y, cursor + prefix + items[i][1][:16], -1, 23)
        else:
            # Use rsplit() to split the file name on the last dot, keeping the leading parts
            file_name_without_ext = items[i][1].rsplit(".", 1)[0]
            screen.draw_string(0, y, cursor + prefix + file_name_without_ext, -1, 23)
        y = y + 12

    # File size / items remaining / logo UI      VVVVVVVV

    screen.draw_rect(0, 168, 256, 192, 18)
    screen.draw_string(0, 184, "{curve_tr}" + "{bar_h}"*30 + "{curve_tl}", -1, 9)
    #total current folder size
    if 128000 - total_size > 0:
        too_big = False
    else:
        too_big = True
    remaining_size = str(round(abs(128000 - total_size)/1024, 2)) + "kb"
    
    fullstring1 = f"{{bar_v}}Size: {(total_size)/1024:.2f}kb ({"Too big!" if too_big else remaining_size})"

    screen.draw_string(0, 176, fullstring1, -1, 9)
    
    screen.draw_char(248, 176, (screen.char_map['bar_v'][0]), -1, 9)

    numItems = len(items)

    fullstring2 = "{bar_v}" + str(min(numItems, 9)) + "/" + str(item_limit) + " items {bar_v}"
    screen.draw_string(256-(len(fullstring2) * 8)//2, 160, fullstring2, 18, 9 if numItems < 10 else 11)
    
    screen.draw_string(0, 168, "{curve_br}" + "{bar_h}"*19 + "{bar_ht}" + "{bar_h}"*10 + "{bar_vl}", -1, 9)

    screen.draw_string(256-(len(fullstring2) * 8)//2, 152, "{curve_br}" + "{bar_h}" * (len(fullstring2) // 2 - 2) + "{curve_bl}", 18, 9)

    screen.draw_aai(216, 1, 'resources/logo.aai')

    screen.update()

# Main program
programs = get_programs()
if not programs:
    screen.draw_string(0, 8, "No .aap programs found in disk/... HOW???", -1, 23)
    screen.update()

nav_stack = [[programs, 0]]
running = True

while running:
    current = nav_stack[-1]
    items = current[0]
    selected = current[1]
    
    # Calculate current path
    path = ""
    for i in range(len(nav_stack) - 1):
        name = nav_stack[i][0][nav_stack[i][1]][1]
        path = path + "/" + name if path else name.replace(".aap", "")
    
    draw_list(items, selected, path)
    for get_events:
        if quit_event:
            running = False
        
        if key_down_event:
            if key_e:
                show_extensions = not show_extensions
                beep("A#4", 0.05)
                programs = get_programs()  # Refresh list with new toggle state
            elif key_ESCAPE:
                raise SystemExit()

        mouse_x, mouse_y = screen.getMousePos()
        if len(nav_stack) > 1:
            list_start_y = 56
        else:
            list_start_y = 40
        item_height = 12
        idx = (mouse_y - list_start_y) // item_height
        if 0 <= idx < len(items):
            nav_stack[-1][1] = idx  # Hover selects item

        # Check if mouse is over Back button
        over_back = len(nav_stack) > 1 and (0 <= mouse_x < 60 and 0 <= mouse_y < 20)

        if left_click:
            if over_back:
                nav_stack.pop()
                beep("D#4", 0.05)
            elif 0 <= idx < len(items):
                item = items[idx]
                if item[0] == "dir":
                    nav_stack.append([item[3], 0])
                    beep("E5", 0.05)
                else:
                    beep("A5", 0.05)
                    screen.clear(9)
                    running = False
                    try:
                        # Launch correct program for file type
                        if len(item) > 4 and item[4] == "aap":
                            parser.parse_keys(item[2])
                            parser.run()
                        elif len(item) > 4 and item[4] == "aai":
                            parser.parse_keys("paint.aap")
                            parser.run()
                        elif len(item) > 4 and item[4] == "aat":
                            parser.parse_keys("notepad.aap")
                            parser.run()
                    except:
                        pass
                    parser.reset()
                    running = True
                    nav_stack = [[programs, 0]]