#bubble sorting display

import essentials
import random
import math
import time

data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31] #32 elements

random.shuffle(data)

# Keep track of our position in the sorting algorithm
i = 0
j = 0

def main():
    global i, j
    running = True
    sorting = True
    while running:
        for get_events:
            if quit_event:
                running = False
            if resize_event:
                screen.handle_resize(event)
            if key_down_event:
                if special_key:
                    running = False
                if key_SPACE:
                    random.shuffle(data)
                    sorting = True
                    i = 0
                    j = 0
        
        # Do one comparison step of bubble sort
        if sorting:
            if j < len(data) - i - 1:
                if data[j] > data[j + 1]:
                    data[j], data[j + 1] = data[j + 1], data[j]
                j += 1
            else:
                j = 0
                i += 1
                if i >= len(data):
                    sorting = False
        
        screen.clear()
        
        # Calculate optimal scaling based on screen dimensions
        bar_width = (256 - 32) // len(data)  # Leave some margin
        height_scale = (192 - 48) / max(data)  # Leave room for text at top
        
        # Center the visualization horizontally
        start_x = (256 - (len(data) * bar_width)) // 2
        
        for k in range(len(data)):
            x = start_x + (k * bar_width)
            bar_height = int(data[k] * height_scale)
            # Draw from bottom up
            screen.draw_line(x, 192 - 8, x, 192 - 8 - bar_height, 20)
            # Make bars thicker by drawing multiple lines
            for offset in range(bar_width - 1):
                screen.draw_line(x + offset, 192 - 8, x + offset, 192 - 8 - bar_height, 20)
        
        screen.draw_string(4, 4, "Bubble Sort - Space: Shuffle", 0, 23)
        screen.update()
        time.sleep(0.1)

main()