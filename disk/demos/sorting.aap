#bubble sorting display

import essentials
import random
import math
import time

# Initialize a list of numbers to sort
data = []

for _ in range(33):
    data.append(random.randint(1, 32))  # 32 elements with random values

random.shuffle(data)

# Keep track of our position in the sorting algorithm
i = 0
j = 0

def main():
    global i, j
    running = True
    sorting = True
    while running:
        for get_events:
            if quit_event:
                running = False
            if key_down_event:
                if key_SPACE:
                    random.shuffle(data)
                    sorting = True
                    i = 0
                    j = 0
        
        # Do one comparison step of bubble sort
        if sorting:
            if j < len(data) - i - 1:
                if data[j] > data[j + 1]:
                    data[j], data[j + 1] = data[j + 1], data[j]
                    play_note("C1", 0x1A, 880 / data[j], 31, 0.05)
                j += 1
            else:
                j = 0
                i += 1
                if i >= len(data):
                    sorting = False
                    for note in ["E4", "A4", "E5"]:
                        play_note("C1", 0x1A, note, 31, 0.5)
                        audio.rest(0.1)
        
        screen.clear()
        
        # Calculate optimal scaling based on screen dimensions
        bar_width = (256 - 32) // len(data)  # Leave some margin
        height_scale = (192 - 48) / max(data)  # Leave room for text at top
        
        # Center the visualization horizontally
        start_x = (256 - (len(data) * bar_width)) // 2
        
        for k in range(len(data)):
            x = start_x + (k * bar_width)
            bar_height = int(data[k] * height_scale)
            y_top = 192 - 8 - bar_height
            y_bottom = 192 - 8
            outline = 0
            # Highlight bars being compared
            if sorting and (k == j or k == j + 1):
                outline = 12 if k == j else 17  # 12: red, 17: green
            screen.draw_rect(x, y_top, x + bar_width, y_bottom, 20, outline)
        screen.draw_string(4, 4, "Bubble Sort - Space: Shuffle", 0, 23)
        time.sleep(0.05 if sorting else 0) 
        screen.update()

main()