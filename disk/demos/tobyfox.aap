#undertale/deltarune type fight

import essentials
import time
import random
import math


class Bullet:
    def __init__(self, x, y, target_x, target_y, speed=1, color=23):
        self.x = x
        self.y = y
        self.speed = speed
        self.color = color
        # Calculate normalized direction toward center
        dx = target_x - x
        dy = target_y - y
        dist = math.hypot(dx, dy)
        if dist == 0:
            self.dx = 0
            self.dy = 0
        else:
            self.dx = dx / dist
            self.dy = dy / dist

    def update(self, center_x, center_y, center_radius):
        self.x += self.dx * self.speed
        self.y += self.dy * self.speed
        # Remove if inside the center circle
        dist = math.hypot(self.x - center_x, self.y - center_y)
        return dist > center_radius

    def draw(self):
        sprite = [
            0, 1, 1, 0,
            1, 1, 1, 1,
            1, 1, 1, 1,
            0, 1, 1, 0
        ]
        for x in range(4):
            for y in range(4):
                if sprite[x + y * 4] == 1:
                    screen.draw_pixel(int(self.x) + x, int(self.y) + y, self.color)

    def collides_with(self, px, py, hitbox=6):
        return abs(self.x - px) < hitbox and abs(self.y - py) < hitbox

def spawn_bullet(box_left, box_right, box_top, box_bottom, center_x, center_y, extra_offset=0):
    # Pick a random edge
    edge = random.choice(['left', 'right', 'top', 'bottom'])
    if edge == 'left':
        x, y = box_left, random.randint(box_top, box_bottom) + extra_offset
    elif edge == 'right':
        x, y = box_right, random.randint(box_top, box_bottom) + extra_offset
    elif edge == 'top':
        x, y = random.randint(box_left, box_right), box_top + extra_offset
    else:
        x, y = random.randint(box_left, box_right), box_bottom + extra_offset
    return Bullet(x, y, center_x, center_y, speed=1, color=23)

def update_bullets(bullets, center_x, center_y, center_radius):
    # Update all bullets and remove those that leave the box
    bullets[:] = [b for b in bullets if b.update(center_x, center_y, center_radius)]

def draw_bullets(bullets):
    for b in bullets:
        b.draw()

def check_bullet_collisions(player_x, player_y, bullets, guiding_souls_enabled, guiding_soul_count, guiding_soul_radius, guiding_soul_hit_timer, frame):
    # Check guiding SOULs first
    if guiding_souls_enabled:
        hit = False
        for idx in range(guiding_soul_count):
            angle = (2 * math.pi / guiding_soul_count) * idx + frame * 0.03
            sx = int(player_x + guiding_soul_radius * math.cos(angle))
            sy = int(player_y + guiding_soul_radius * math.sin(angle))
            for b in bullets[:]:
                if abs(b.x - sx) < 6 and abs(b.y - sy) < 6:
                    bullets.remove(b)
                    guiding_soul_hit_timer[idx] = 8  # Flash for a few frames
                    hit = True
        if hit:
            return False  # Bullet blocked, no player hit
    # Then check player
    for b in bullets[:]:
        if abs(b.x - player_x) < 6 and abs(b.y - player_y) < 6:
            bullets.remove(b)
            return True
    return False



def soul(x, y, visible, state=0, color=11):
    normal = [
        0, 1, 0, 0, 1, 0,
        1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1,
        0, 1, 1, 1, 1, 0,
        0, 0, 1, 1, 0, 0,
    ]
    broken = [
        0, 1, 0, 0, 1, 0,
        1, 1, 1, 0, 1, 1,
        1, 1, 0, 1, 1, 1,
        1, 1, 1, 0, 1, 1,
        0, 1, 0, 0, 1, 0,
        0, 0, 0, 1, 0, 0,
    ]
    for i in range(6):
        for j in range(6):
            if state == 0:
                if normal[i * 6 + j] == 1:
                    if visible:
                        screen.draw_pixel(x + j, y + i, color)
            elif state == 1:
                if broken[i * 6 + j] == 1:
                    if visible:
                        screen.draw_pixel(x + j, y + i, color)

def heartParticle(x, y, dx, dy):
    sprite = [
        0, 1, 0, 0,
        1, 1, 1, 0,
        1, 1, 1, 1,
        0, 1, 1, 1
    ]
    for i in range(4):
        for j in range(4):
            if sprite[i * 4 + j] == 1:
                screen.draw_pixel(int(x) + j, int(y) + i, 11)

def create_death_particles(x, y, power):
    # Create 8 particles with different initial velocities
    particles = []
    velocities = [
        (-3 * power, -4 * power), (-1 * power, -4 * power), (1 * power, -4 * power), (3 * power, -4 * power),  # Upper particles with more upward velocity
        (-3 * power, -2 * power), (-1 * power, -2 * power), (1 * power, -2 * power), (3 * power, -2 * power)   # Lower particles
    ]
    for dx, dy in velocities:
        particles.append({"x": x, "y": y, "dx": dx, "dy": dy})
    return particles


def update_particles(particles):
    gravity = 0.05
    for particle in particles:
        # Update velocity with gravity
        particle["dy"] += gravity
        # Update position
        particle["x"] += particle["dx"]
        particle["y"] += particle["dy"]
        # Draw the particle
        heartParticle(particle["x"], particle["y"], 0, 0)
    # Remove particles that fall off screen
    return [p for p in particles if p["y"] < 192]


def box():    

    width = 64
    height = 64
    x1 = (256 - width) // 2
    y1 = (192 - height) // 2
    x2 = x1 + width
    y2 = y1 + height
    color = 0 
    outline = 17
    screen.draw_rect(x1, y1, x2, y2, color, outline)

def stats(hp):
    string = "Kris               HP " + str(hp) + "/160"
    screen.draw_string(128 - len(string) * 4, 132, string, -1, 21)

def background_grids(l1x, l1y, l2x, l2y, cutoff=64):
    # Ensure offsets wrap every 16 pixels for seamless tiling
    l1x = l1x % 16
    l1y = l1y % 16
    l2x = l2x % 16
    l2y = l2y % 16

    for x in range(-16 + l1x, 256, 16):
        screen.draw_line(x, 0, x, 192 - cutoff, 2)
    for y in range(-16 + l1y, 192 - cutoff, 16):
        screen.draw_line(0, y, 256, y, 2)

    for x in range(-16 + l2x, 256, 16):
        screen.draw_line(x, 0, x, 192 - cutoff, 5)
    for y in range(-16 + l2y, 192 - cutoff, 16):
        screen.draw_line(0, y, 256, y, 5)




def enemy_sprite(x, y, state):
    normal = [
        -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 9, 9, 21, 21, 21, 21, 21, 21, 21, 21, 21, 9, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 4, 9, 9, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 9, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 4, 9, 9, 9, 21, 21, 21, 21, 21, 21, 21, 21, 21, 9, 9, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 9, 21, 9, 9, 9, 9, 9, 9, 9, 9, 9, 21, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 9, 9, 21, 21, 21, 21, 21, 21, 21, 21, 21, 9, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, -1, -1, -1, -1, 4, 4, 4, 4, -1,
        -1, -1, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, -1, -1, -1, -1, 4, 21, 21, 4, -1,
        -1, 4, 9, 9, 21, 9, 9, 9, 9, 9, 9, 9, 9, 9, 21, 9, 9, 4, -1, -1, -1, -1, 4, 9, 9, 4, -1,
        -1, 4, 9, 9, 9, 21, 21, 21, 21, 21, 21, 21, 21, 21, 9, 9, 9, 4, -1, -1, -1, -1, 4, 21, 21, 4, -1,
        -1, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, -1, -1, -1, 4, 9, 9, 4, -1,
        -1, -1, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, -1, -1, -1, -1, 4, 21, 21, 4, -1,
        -1, 4, 9, 9, 21, 9, 9, 9, 9, 9, 9, 9, 9, 9, 21, 9, 9, 4, -1, -1, -1, -1, 4, 9, 9, 4, -1,
        -1, 4, 9, 9, 9, 21, 21, 21, 21, 21, 21, 21, 21, 21, 9, 9, 9, 4, -1, -1, -1, -1, 4, 9, 9, 4, -1,
        -1, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, -1, -1, -1, 4, 16, 16, 16, 16, 4,
        4, 16, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 16, 4, -1, -1, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 4, 16, 16, 4, -1, 4, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 4, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, -1, 4, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 16, 16, 11, 11, 16, 16, 16, 9, 9, 16, 16, 4, 16, 16, 4, -1, -1, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 16, 16, 4, 4, 16, 16, 16, 4, 4, 16, 16, 4, 16, 16, 4, -1, -1, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 16, 16, 4, 4, 16, 16, 16, 4, 4, 16, 16, 4, 16, 16, 4, -1, -1, 4, 4, 4, 4, 4, 4,
        4, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 4, -1, -1, -1, 4, 9, 9, 4, -1,
        4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, -1, -1, -1, 4, 9, 9, 4, -1,
        4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, -1, -1, -1, -1, 4, 4, -1, -1,
        4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 4, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 4, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    ]
    spared = [
        -1, -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 14, 14, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14, 14, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 4, 14, 14, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14, 14, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 4, 14, 14, 14, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14, 14, 14, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 14, 23, 14, 14, 14, 14, 14, 14, 14, 14, 14, 23, 14, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 14, 14, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14, 14, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, -1, -1, -1, -1, -1, 4, 4, 4, 4, -1,
        -1, -1, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, -1, -1, -1, -1, -1, 4, 21, 21, 4, -1,
        -1, 4, 14, 14, 23, 14, 14, 14, 14, 14, 14, 14, 14, 14, 23, 14, 14, 4, -1, -1, -1, -1, 4, 9, 9, 4, -1,
        -1, 4, 14, 14, 14, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14, 14, 14, 4, -1, -1, -1, -1, 4, 21, 21, 4, -1,
        -1, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, -1, -1, -1, -1, 4, 9, 9, 4, -1,
        -1, -1, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, -1, -1, -1, -1, -1, 4, 21, 21, 4, -1,
        -1, 4, 14, 14, 23, 14, 14, 14, 14, 14, 14, 14, 14, 14, 23, 14, 14, 4, -1, -1, -1, -1, 4, 9, 9, 4, -1,
        -1, 4, 14, 14, 14, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14, 14, 14, 4, -1, -1, -1, -1, 4, 9, 9, 4, -1,
        -1, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, -1, -1, -1, 4, 16, 16, 16, 16, 4,
        4, 16, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, 16, 4, -1, -1, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 4, 14, 14, 14, 14, 14, 14, 14, 14, 14, 4, 4, 16, 16, 4, -1, 4, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 16, 4, 4, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 16, 4, 16, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, 4, 16, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, -1, 4, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 16, 16, 11, 11, 16, 16, 16, 9, 9, 16, 16, 4, 16, 16, 4, -1, -1, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 16, 16, 4, 4, 16, 16, 16, 4, 4, 16, 16, 4, 16, 16, 4, -1, -1, 4, 16, 16, 16, 16, 4,
        4, 16, 16, 4, 16, 16, 4, 4, 16, 16, 16, 4, 4, 16, 16, 4, 16, 16, 4, -1, -1, 4, 4, 4, 4, 4, 4,
        4, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 16, 4, 16, 16, 4, -1, -1, -1, 4, 9, 9, 4, -1,
        4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, -1, -1, -1, 4, 9, 9, 4, -1,
        4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, -1, -1, -1, -1, 4, 4, -1, -1,
        4, 16, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 16, 4, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 4, 16, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, 4, 16, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, 16, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, 4, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    ]
    for i in range(43):
        for j in range(27):
            idx = i * 27 + j
            if state == 0:
                if normal[idx] != -1:
                    screen.draw_pixel(x + j, y + i, normal[idx])
            elif state == 1:
                if spared[idx] != -1:
                    screen.draw_pixel(x + j, y + i, spared[idx])

def kbattle(x, y, frame=0):
    frames = [


        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 23, 23, 23, 23, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 19, 23, 23, 23, 23, 23, 1, -1, 1, 1, 1, 1, 1, 21, 1, 1, 1, 1, 1, 1, 13, 13, 13, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 19, 23, 23, 23, 23, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 13, 13, 1, 13, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 19, 19, 23, 23, 23, 23, 23, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 21, 21, 21, 21, 21, 21, 21, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 23, 19, 23, 23, 23, 23, 23, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 13, 21, 21, 21, 21, 21, 21, 21, 21, 21, 1, -1, -1, -1, -1, -1, -1, 1, 19, 23, 19, 19, 19, 19, 19, 19, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 21, 21, 21, 21, 21, 1, 1, 1, 21, 21, 1, -1, -1, -1, -1, -1, 1, 19, 23, 23, 19, 19, 19, 19, 19, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 13, 21, 21, 21, 21, 21, 21, 1, -1, -1, -1, -1, -1, 1, 19, 23, 23, 19, 19, 19, 19, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 13, 12, 13, 13, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 23, 23, 19, 19, 19, 19, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 13, 13, 13, 13, 13, 12, 12, 13, 13, 1, 12, 1, -1, -1, -1, -1, -1, -1, 1, 19, 23, 19, 19, 19, 19, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 13, 13, 12, 12, 12, 12, 13, 12, 12, 13, 12, 1, 21, 1, -1, -1, -1, -1, 1, 19, 23, 19, 19, 19, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 12, 1, 1, 1, 1, 12, 13, 13, 13, 13, 1, 1, 1, 1, 1, 1, 1, 1, 19, 23, 19, 19, 19, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 12, 13, 1, 1, 21, 1, 1, 1, 5, 5, 1, 19, 23, 19, 19, 19, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 21, 1, 1, 1, 13, 1, 5, 5, 1, 23, 19, 19, 19, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 12, 12, 1, 21, 21, 21, 21, 1, 1, 1, 1, 5, 5, 1, 19, 19, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 12, 1, 1, 1, 1, 21, 21, 1, 21, 1, 13, 1, 5, 5, 5, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 21, 21, 1, 1, 21, 21, 1, 21, 1, 1, 5, 5, 5, 5, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 13, 13, 13, 1, 21, 13, 21, 21, 21, 1, 1, 1, 5, 5, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 21, 21, 1, 21, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 21, 13, 1, -1, -1, 1, 1, 1, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 21, 21, 13, -1, -1, -1, 1, 13, 21, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 13, 21, 21, 1, -1, -1, -1, 1, 21, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 13, 13, 13, 1, -1, -1, 1, 13, 13, 13, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 13, 13, 21, 13, 1, -1, 1, 21, 13, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 13, 21, 21, 21, 1, -1, 1, 13, 21, 21, 21, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, ],



    ]
    sprite = frames[frame % len(frames)]
    for i in range(38):
        for j in range(36):
            idx = i * 36 + j
            if sprite[idx] != -1:
                screen.draw_pixel(x + j, y + i, sprite[idx])



def main():
    def draw_guiding_souls(center_x, center_y, frame, hit_timers):
        for idx in range(guiding_soul_count):
            angle = (2 * math.pi / guiding_soul_count) * idx + frame * 0.03
            sx = int(center_x + guiding_soul_radius * math.cos(angle))
            sy = int(center_y + guiding_soul_radius * math.sin(angle))
            color = guiding_soul_colors[idx % len(guiding_soul_colors)]
            # Flash white if hit
            draw_color = 23 if hit_timers[idx] > 0 and (hit_timers[idx] // 2) % 2 == 0 else color
            soul(sx, sy, True, 0, draw_color)
    running = True
    player_x = 256 // 2 + 10
    player_y = 192 // 2
    bullets = []
    hp = 160
    spawn_timer = 0
    spawn_interval = 30
    i = 0
    j = 0
    turn = 0  # 0 = player, 1 = enemy
    turnIdx = 0
    mercy = 0
    flirt_count = 0
    tvdinner_cooldown = 0
    defended = False
    enemy_turn_timer = 0  # in frames (10 seconds = 10*60 = 600 frames)
    
    box_left = (256 - 64) // 2
    box_right = box_left + 64
    box_top = (192 - 64) // 2
    box_bottom = box_top + 64

    death_count = 0

    # Death sequence states
    ALIVE = 0
    BREAKING = 1
    PARTICLES = 2
    GAME_OVER = 3
    death_state = ALIVE
    death_timer = 0
    particles = []

    # Game over menu
    menu_selection = 0
    menu_y_positions = [96, 112, 120]
    sound_played = False

    # Player turn menu
    menu_state = "MAIN"  # MAIN, ACT, ITEM, SPARE
    menu_options = {
        "MAIN": ["ACT", "ITEM", "SPARE", "DEFEND"],
        "ACT": ["Check", "Flirt"],
        "ITEM": ["TVDinner"],
        "SPARE": ["Spare"]
    }
    menu_idx = 0
    act_idx = 0
    item_idx = 0
    spare_idx = 0

    message = ""
    message_active = False
    message_displayed = ""
    message_char_index = 0
    message_speed = 4  # frames per character
    message_timer = 0

    messages = {
        "first_turn": "* A strong aura emanates\nfrom the Watercooler.",
        "other_turn": "* The watercooler shows no mercy.",
        "check": "* You CHECKed the Watercooler...\n* The water was confirmed\nto be cool.",
        "flirt": '* You asked the\nWatercooler, "water" they doing later.',
        "spare_fail": "* Kris tried to SPARE the Watercooler, but it can't\nbe spared.",
        "spare_success": "* Kris spared Watercooler!",
        "cryout": "* You cried out. They heard you.",
    }

    #how many variable do we have now?
    guiding_souls_enabled = False  # Set to True when "Cry Out" is used
    guiding_soul_count = 6
    guiding_soul_colors = []  
    for q in range(guiding_soul_count):
        guiding_soul_colors.append(random.randint(8, 22))
    guiding_soul_radius = 14
    guiding_soul_positions = []
    guiding_soul_hit_timer = [0] * guiding_soul_count  # For hit flash

    while running:
        screen.clear()
        for get_events:
            if quit_event:
                running = False
            if resize_event:
                screen.handle_resize(event)
            if key_down_event:
                if special_key:
                    running = False
                elif death_state == GAME_OVER:
                    if key_UP or key_DOWN:
                        menu_selection = (menu_selection + 1) % 3 
                        beep(1000, 0.05)
                    elif key_z:
                        beep(500, 0.05)
                        if menu_selection == 0:
                            player_x = 256 // 2 + 10
                            player_y = 192 // 2
                            bullets = []
                            hp = 160
                            spawn_timer = 0
                            death_state = ALIVE
                            turn = 0
                            turnIdx = 0
                            mercy = 0
                            flirt_count = 0
                            tvdinner_cooldown = 0
                            defended = False
                            i = 0
                            sound_played = False
                            menu_state = "MAIN"
                            menu_idx = 0
                        elif menu_selection == 1:
                            running = False
                        elif menu_selection == 2:
                            # You will have guiding SOULs of various colors protect you
                            message = messages["cryout"]
                            message_active = True
                            guiding_souls_enabled = True
                            player_x = 256 // 2 + 10
                            player_y = 192 // 2
                            bullets = []
                            hp = 160
                            spawn_timer = 0
                            death_state = ALIVE
                            turn = 0
                            turnIdx = 0
                            mercy = 0
                            flirt_count = 0
                            tvdinner_cooldown = 0
                            defended = False
                            i = 0
                            sound_played = False
                            menu_state = "MAIN"
                            menu_idx = 0
                elif message_active:
                    if key_z:
                        beep(500, 0.05)
                        if message_char_index < len(message):
                            # Instantly show full message
                            message_char_index = len(message)
                            message_displayed = message
                        else:
                            message_active = False
                            message = ""
                            message_displayed = ""
                            message_char_index = 0
                            # After message, proceed to next turn/menu as needed
                            if turn == 0 and menu_state == "SHOW_CHECK":
                                turn = 1
                                i = 0
                                enemy_turn_timer = 600
                                menu_state = "MAIN"
                                menu_idx = 0
                            elif turn == 0 and menu_state == "SHOW_FLIRT":
                                turn = 1
                                i = 0
                                enemy_turn_timer = 600
                                menu_state = "MAIN"
                                menu_idx = 0
                            elif menu_state == "SHOW_BEGIN":
                                menu_state = "MAIN"
                elif death_state == ALIVE and turn == 0 and not message_active:
                    # Player turn menu navigation
                    if menu_state == "MAIN":
                        if key_UP:
                            menu_idx = (menu_idx - 1) % len(menu_options["MAIN"])
                            beep(1000, 0.05)
                        elif key_DOWN:
                            menu_idx = (menu_idx + 1) % len(menu_options["MAIN"])
                            beep(1000, 0.05)
                        elif key_z:
                            selected = menu_options["MAIN"][menu_idx]
                            beep(500, 0.05)
                            if selected == "ACT":
                                menu_state = "ACT"
                                act_idx = 0
                            elif selected == "ITEM":
                                menu_state = "ITEM"
                                item_idx = 0
                            elif selected == "SPARE":
                                menu_state = "SPARE"
                                spare_idx = 0
                            elif selected == "DEFEND":
                                defended = True
                                turn = 1  # End player turn
                                i = 0
                                enemy_turn_timer = 600
                                menu_state = "MAIN"
                                menu_idx = 0
                        elif key_x:
                            pass  # No effect on main menu
                    elif menu_state == "ACT":
                        if key_UP or key_DOWN:
                            act_idx = 1 - act_idx
                        elif key_z:
                            beep(500, 0.05)
                            if act_idx == 0:  # Check
                                message = messages["check"]
                                message_active = True
                                menu_state = "SHOW_CHECK"
                                message_displayed = ""
                                message_char_index = 0
                                message_timer = 0
                            elif act_idx == 1:  # Flirt
                                flirt_count += 1
                                mercy = min(100, mercy + 25)
                                message = messages["flirt"]
                                message_active = True
                                menu_state = "SHOW_FLIRT"
                                message_displayed = ""
                                message_char_index = 0
                                message_timer = 0
                        elif key_x:
                            audio.play_note("C1", 0x15, 220, 31, 0.5)
                            menu_state = "MAIN"

                    elif menu_state == "ITEM":
                        if key_z:
                            beep(500, 0.05)
                            if tvdinner_cooldown == 0:
                                hp = min(160, hp + 80)
                                tvdinner_cooldown = 3
                                turn = 1
                                i = 0
                                enemy_turn_timer = 600
                                menu_state = "MAIN"
                                menu_idx = 0
                            # If not available, do nothing (stay in menu)
                        elif key_x:
                            audio.play_note("C1", 0x15, 220, 31, 0.5)
                            menu_state = "MAIN"
                    elif menu_state == "SPARE":
                        if key_z:
                            beep(500, 0.05)
                            if mercy >= 100:
                                death_state = GAME_OVER
                                turn = 1  # End player turn
                                i = 0
                                enemy_turn_timer = 600
                                menu_state = "MAIN"
                                menu_idx = 0
                                message = messages["spare_success"]
                                message_active = True
                                message_displayed = ""
                                message_char_index = 0
                                message_timer = 0
                            else:
                                message = messages["spare_fail"]
                                message_active = True
                                menu_state = "SHOW_SPARE_FAIL"
                                turn = 1  # End player turn
                                i = 0
                                enemy_turn_timer = 600
                        elif key_x:
                            audio.play_note("C1", 0x15, 220, 31, 0.5)
                            menu_state = "MAIN"

        # Only process movement and game logic if alive
        if death_state == ALIVE:
            # Show player turn begin message
            if turn == 0 and not message_active and menu_state == "MAIN" and i == 1:
                if turnIdx == 0:
                    message = messages["first_turn"]
                else:
                    message = messages["other_turn"]
                message_active = True
                menu_state = "SHOW_BEGIN"

            background_grids(-j // 4, j // 4, j // 4, -j // 4, 64 if turn == 0 else 0)
            j += 1
            i += 1
            if turn == 1:  # Enemy's turn (battle/dodging)
                box()
                enemy_sprite(192, 64, 1 if mercy >= 100 else 0)
                kbattle(32, 64, j // 8)
                #screen.draw_string(0, 0, "T: "+ str(turn) + " HP: " + str(hp) + " Mercy: " + str(mercy) + " Flirt: " + str(flirt_count), -1, 23)
                keys = obtain_keys_held()
                player_speed = 0.5 if keys[keycode_x] else 1
                if keys[keycode_UP]:
                    player_y -= player_speed
                if keys[keycode_DOWN]:
                    player_y += player_speed
                if keys[keycode_LEFT]:
                    player_x -= player_speed
                if keys[keycode_RIGHT]:
                    player_x += player_speed

                spawn_timer += 1
                if spawn_timer >= spawn_interval:
                    bullets.append(spawn_bullet(box_left, box_right, box_top, box_bottom, center_x, center_y, 16))
                    spawn_timer = 0

                center_x = (box_left + box_right) // 2
                center_y = (box_top + box_bottom) // 2
                center_radius = min(16, 4 + i // 30)  # Slowly grows up to 24

                screen.draw_ellipse(center_x, center_y, center_radius, center_radius, 23)
                update_bullets(bullets, center_x, center_y, center_radius)
                draw_bullets(bullets)
                
                soul(int(player_x), int(player_y), True, 0)
                if guiding_souls_enabled:
                    draw_guiding_souls(int(player_x), int(player_y), i, guiding_soul_hit_timer)

                # Check for center circle collision
                dist_to_center = math.hypot(player_x - center_x, player_y - center_y)
                if dist_to_center < center_radius:
                    dmg = random.randint(25, 30)
                    if defended:
                        dmg = int(dmg * 0.95)
                    hp -= dmg
                    audio.play_note("C1", 0x11, 220, 31, 0.1)

                # Check for bullet collisions as before (removes bullet if hit)
                if check_bullet_collisions(
                        player_x, player_y, bullets,
                        guiding_souls_enabled, guiding_soul_count, guiding_soul_radius, guiding_soul_hit_timer, i):
                    dmg = random.randint(25, 30)
                    if defended:
                        dmg = int(dmg * 0.95)
                    hp -= dmg
                    audio.play_note("C1", 0x11, 220, 31, 0.1)

                if hp <= 0:
                    death_state = BREAKING
                    death_timer = 60
                    hp = 0

                # Constrain player position to the box
                player_x = max(box_left + 1, min(box_right - 7, player_x))
                player_y = max(box_top + 1, min(box_bottom - 7, player_y))

                stats(hp)

                # End enemy turn after timer expires
                enemy_turn_timer -= 1
                if enemy_turn_timer <= 0:
                    turnIdx += 1
                    turn = 0
                    defended = False
                    if tvdinner_cooldown > 0:
                        tvdinner_cooldown -= 1
            else:  # Player's turn (menu)
                enemy_sprite(192, 64, 1 if mercy >= 100 else 0)
                kbattle(32, 64, j // 8)
                stats(hp)
                # Draw menu and heart cursor as above
                y_base = 144
                cursor_x = 16
                if menu_state == "MAIN":
                    for idx, opt in enumerate(menu_options["MAIN"]):
                        fg = 22 if idx == menu_idx else 23  # yellow if selected, white otherwise
                        bg = 0
                        screen.draw_string(32, y_base + idx * 12, opt, bg, fg)
                    # Draw heart cursor next to selected option
                    soul(cursor_x, y_base + menu_idx * 12, True, 0)
                elif menu_state == "ACT":
                    for idx, opt in enumerate(menu_options["ACT"]):
                        fg = 22 if idx == act_idx else 23
                        bg = 0
                        screen.draw_string(32, y_base + idx * 12, opt, bg, fg)
                    soul(cursor_x, y_base + act_idx * 12, True, 0)
                elif menu_state == "ITEM":
                    fg = 22 if tvdinner_cooldown == 0 else 23
                    bg = 0
                    label = "TVDinner" + ("" if tvdinner_cooldown == 0 else f" (Avaliable in {tvdinner_cooldown} more turn(s))")
                    screen.draw_string(32, y_base, label, bg, fg)
                    soul(cursor_x, y_base, True, 0)
                elif menu_state == "SPARE":
                    fg = 22 if mercy >= 100 else 23
                    bg = 0
                    screen.draw_string(32, y_base, "Spare", bg, fg)
                    soul(cursor_x, y_base, True, 0)

            # Animate message display
            if message_active and message:
                if message_char_index < len(message):
                    message_timer += 1
                    if message_timer >= message_speed:
                        message_char_index += 1
                        message_displayed = message[:message_char_index]
                        message_timer = 0
                        audio.play_note("C1", 0x13, 880, 31, 0.1)
                else:
                    message_displayed = message

            # Draw message box if active
            if message_active and message:
                msg_y = 132
                msg_x = 16
                msg_w = 224
                msg_h = 48
                screen.draw_rect(msg_x, msg_y, msg_x + msg_w, msg_y + msg_h, 0, 23)
                screen.draw_string(msg_x + 8, msg_y + 4, message_displayed, 0, 23)
        # Death sequence
        elif death_state == BREAKING:
            if not sound_played:
                audio.play_note("C1", 0x14, 220, 31, 0.5)
                death_count += 1 #just increment when sound plays
                sound_played = True
            soul(player_x - 3, player_y - 3, True, 1)
            death_timer -= 1
            if death_timer <= 0:
                death_state = PARTICLES
                particles = create_death_particles(player_x, player_y, 0.5)
                death_timer = 120
                sound_played = False

        elif death_state == PARTICLES:
            if not sound_played:
                audio.play_note("C1", 0x15, 220, 31, 1)
                sound_played = True
            particles = update_particles(particles)
            death_timer -= 1
            if death_timer <= 0 or not particles:
                death_state = GAME_OVER
                sound_played = False

        elif death_state == GAME_OVER:
            game_over_text = "GAME OVER" if mercy < 100 else "YOU WON"
            screen.draw_string(128 - len(game_over_text) * 4, 64, game_over_text, 0, 23)
            continue_text = "Continue"
            give_up_text = "Give Up" if mercy < 100 else "Leave"
            help_text = "Cry Out"
            screen.draw_string(128 - len(continue_text) * 4, menu_y_positions[0], continue_text, 0, 23)
            screen.draw_string(128 - len(give_up_text) * 4, menu_y_positions[1], give_up_text, 0, 23)
            if death_count > 4:
                screen.draw_string(128 - len(help_text) * 4, menu_y_positions[2], help_text, 0, 23)
            cursor_x = 128 - len(continue_text) * 4 - 16
            cursor_y = menu_y_positions[menu_selection]
            soul(cursor_x, cursor_y, True, 0)

        if guiding_souls_enabled:
            for idx in range(guiding_soul_count):
                if guiding_soul_hit_timer[idx] > 0:
                    guiding_soul_hit_timer[idx] -= 1

        screen.update()
        #time.sleep(0.016)

main()